{"title":"Probability Distributions in R","markdown":{"yaml":{"title":"Probability Distributions in R"},"headingText":"Probability Distributions in R","containsRefs":false,"markdown":"\n\n```{r}\n\nlibrary(formatR)\n\ndef.chunk.hook  <- knitr::knit_hooks$get(\"chunk\")\nknitr::knit_hooks$set(chunk = function(x, options) {\n  x <- def.chunk.hook(x, options)\n  ifelse(options$size != \"normalsize\", paste0(\"\\n \\\\\", options$size,\"\\n\\n\", x, \"\\n\\n \\\\normalsize\"), x)\n})\n\nknitr::opts_chunk$set(fig.align = \"center\", size = \"footnotesize\", comment = \"#>\")\noptions(width = 60)\n```\n\n```{r}\nrenorm <- function(n, mean = 0, sd = 1, empirical = FALSE){\n    MASS::mvrnorm(n, mean, sd^2, empirical = empirical)[, 1]\n}\n\ntex <- latex2exp::TeX\n```\n\n\n## Working with probability distributions\n\nWhen we have a probability distribution there are several operations that we can do conditioning on certain parameters values:\n\n- generate random $x$ values\n- calculate the density of a certain $x$ value\n- calculate the cumulative probability of a certain $x$ value\n- calculate the $x$ value associated to a certain cumulative probability\n\n## Probability Distributions in R\n\nIn R there are several probability distributions (PD) implemented as functions. Basically the corresponding equation of the PD is converted into R code. For example, the Gaussian distribution Probability Density Function (PDF) is represented in @eq-gaussian-pdf.\n\n$$\nf(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\, e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}}\n$${#eq-gaussian-pdf}\n\n## Gaussian distribution example\n\nLet's convert the @eq-gaussian-pdf into R code. Our variable is $x$ then we have $\\mu$ and $\\sigma$ that are the mean and standard deviation of the Gaussian distribution.\n\n```{r}\n#| echo: true\n#| collapse: true\nnorm <- function(x, mean = 0, sd = 1){\n    1 / sqrt(2 * pi * sd^2) * exp(-((x - mean)^2)/(2 * sd^2))\n}\n\nnorm(0)\nnorm(2)\nnorm(-1)\n```\n\n## Gaussian distribution example\n\nWith the previous code we are calculating the probability density of a certain value given the parameters. Let's use `norm()` for a sequence of values and plot the results.\n\n```{r}\n#| fig-width: 8\n#| fig-height: 5\nx <- seq(-5, 5, 0.1)\ny <- norm(x)\n\n# TODO increase labels size\nplot(x, y, type = \"l\", ylab = \"Density\", main = \"norm(x, mean = 0, sd = 1)\")\n```\n\n## Gaussian distribution example\n\nClearly, if we change the parameters, the calculated densities will be different. For example:\n\n```{r}\n#| fig-width: 8\n#| fig-height: 5\nx <- seq(-5, 5, 0.1)\ny1 <- norm(x)\ny2 <- norm(x, 1, 1)\n\n# TODO increase labels size\nplot(x, y2, type = \"l\", ylab = \"Density\", col = \"dodgerblue\", lwd = 2)\nlines(x, y1, col = \"firebrick\", lwd = 2)\nabline(v = 0, lty = \"dashed\", lwd = 1.5)\npoints(x = c(0, 0), y = c(norm(0), norm(0, 1)), pch = 19, col = c(\"firebrick\", \"dodgerblue\"), cex = 2)\n```\n\n## Gaussian distribution in R\n\nFortunately we do not need to write the probabilities distribution manually but a lot of them are already included in R. For example, the `norm()` function can be replaced by `dnorm()`.\n\n```{r}\n#| echo: true\nnorm(0, 1, 2)\ndnorm(0, 1, 2)\n```\n\n# `d`, `q`, `r` and `p` functions\n\n## `d`, `q`, `r` and `p` functions\n\nActually in R there are already implemented a lot of probability distributions. This document [https://cran.r-project.org/web/views/Distributions.html](https://cran.r-project.org/web/views/Distributions.html) provides a very comprehensive overview.\n\nThe general idea is always the same, regardless the distribution:\n\n- generate random $x$ values **there is the `r` function**\n- calculate the density of a certain $x$ value **there is the `d` function**\n- calculate the cumulative probability of a certain $x$ value **there is the `p` function**\n- calculate the $x$ value associated to a certain cumulative probability **there is the `q` function**\n\n## `d`, `q`, `r` and `p` functions\n\nThe combination is `d`, `p`, `q` or `r` + the function contaning the equations of that specific distribution. Thus we can use `dnorm()`, `pnorm()`, `qnorm()` and `rnorm()`.\n\n## Maximum Likelihood\n\nThe `d` function provides the probability density (or likelihood) of a certain value(s) fixing the parameters. What about fixing the value(s) and changing the parameters?\n\nLet's assume we have $n = 10$ values from a Normal distribution with unknown parameters:\n\n```{r}\nx <- renorm(10, 10, 5, TRUE)\nround(x, 2)\n```\n\nWe can calculate the mean and standard deviation:\n\n```{r}\n#| echo: true\n#| collapse: true\n\nmean(x)\nsd(x)\n```\n\n## Maximum Likelihood\n\nNow, we can calculate the likelihood of the 10 values. Which values should we used for the parameters? We can try different values for $\\mu$ and $\\sigma$:\n\n```{r}\n#| echo: true\n#| collapse: true\n#| tidy.opts: { width.cutoff: 10 }\n\ndnorm(x, 0, 1)\ndnorm(x, 10, 5)\ndnorm(x, -5, 2)\n```\n\n## Maximum Likelihood\n\nWe can take the product (or the sum of the log-transformed values):\n\n```{r}\n#| echo: true\n#| collapse: true\n\nprod(dnorm(x, 0, 1))\nprod(dnorm(x, 10, 5))\nprod(dnorm(x, -5, 2))\n```\n\n## Maximum Likelihood\n\nWhat about varying a parameter, e.g., $\\mu$? We can fix the $\\sigma$ to a certain value, for example 5.\n\n## Maximum Likelihood\n\n```{r}\nll5 <- dnorm(x, 5, 5)\nll8 <- dnorm(x, 8, 5)\nll12 <- dnorm(x, 12, 5)\nll0 <- dnorm(x, 0, 5)\n\npar(mfrow = c(2,2))\n\ncurve(dnorm(x, 5, 5), -20, 30, main = tex(\"$\\\\mu = 5$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll5, col = \"firebrick\")\n\ncurve(dnorm(x, 8, 5), -20, 30, main = tex(\"$\\\\mu = 8$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll8, col = \"firebrick\")\n\ncurve(dnorm(x, 12, 5), -20, 30, main = tex(\"$\\\\mu = 12$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll12, col = \"firebrick\")\n\ncurve(dnorm(x, 0, 5), -20, 30, main = tex(\"$\\\\mu = 0$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll0, col = \"firebrick\")\n```\n\n## Maximum Likelihood\n\nThere is a point where the likelihood is maximised. The point is when the sum of the heights of the red segments is maximised.\n\n```{r}\n#| out-width: 90%\nmu <- seq(0, 20, 0.1) # sequence from -10 to 10 for the mu parameter\nlik <- sapply(mu, function(m) prod(dnorm(x, m, 5)))\n\nplot(mu, lik, type = \"l\")\n```\n\n## Cumulative distribution\n\nWith the `p` function we calculate the cumulative probability associated with a given value.\n\n```{r}\n#| out-width: 90%\npar(mfrow = c(1, 2))\ncurve(dnorm(x, 0, 1), -4, 4)\npoints(x = -2, y = 0, pch = 19, col = \"firebrick\")\nsegments(x0 = -2, y0 = 0, x1 = -2, y1 = dnorm(-2, 0, 1), col = \"firebrick\")\n\npoints(x = 0, y = 0, pch = 19, col = \"black\")\nsegments(x0 = 0, y0 = 0, x1 = 0, y1 = dnorm(0, 0, 1), col = \"black\")\n\npoints(x = 1, y = 0, pch = 19, col = \"dodgerblue\")\nsegments(x0 = 1, y0 = 0, x1 = 1, y1 = dnorm(1, 0, 1), col = \"dodgerblue\")\n\ncurve(pnorm(x, 0, 1), -4, 4)\npoints(x = -2, y = 0, pch = 19, col = \"firebrick\")\nsegments(x0 = -2, y0 = 0, x1 = -2, y1 = pnorm(-2, 0, 1), col = \"firebrick\")\n\npoints(x = 0, y = 0, pch = 19, col = \"black\")\nsegments(x0 = 0, y0 = 0, x1 = 0, y1 = pnorm(0, 0, 1), col = \"black\")\n\npoints(x = 1, y = 0, pch = 19, col = \"dodgerblue\")\nsegments(x0 = 1, y0 = 0, x1 = 1, y1 = pnorm(1, 0, 1), col = \"dodgerblue\")\n```\n\n## Inverse Cumulative distribution\n\nThe `q` function is basically the inverse of the `p` function. We want to know which is the `x` value associated with a given cumulative probability. One is just the inverse of the other.\n\n```{r}\n#| echo: true\np <- pnorm(-0.5, 0, 1)\np # % of area on the left of -0.5 (given mu and sigma)\nq <- qnorm(p, 0, 1)\nq # value associated with p%  of cumulative probability \n```\n\nIf you remember from Psychometrics courses, these are respectively the percentile and the rank percentile.\n\n## Generating numbers\n\nFinally the `r` function can generate random numbers, fixing the parameters values. This is the core of Monte Carlo simulations.\n\n```{r}\n#| echo: true\nx <- rnorm(100, 10, 5)\nhead(x)\nsummary(x)\n# new values everytime you run the command\nsummary(rnorm(100, 10, 5))\n```\n\n## Discrete distributions\n\nThe same functions can also be used with discrete probability distributions. For example the Binomial or the Poisson distributions.\n\n```{r}\n#| echo: true\nrpois(n = 10, lambda = 20)\ndpois(x = 10, lambda = 20)\nppois(q = 10, lambda = 20)\nqpois(p = 0.5, lambda = 20)\n```\n\n## Discrete distributions, Poisson\n\nIn the Poisson distributions we are counting the number of events. We can have 10 or 11 events, not 10.5.\n\n```{r}\nx <- seq(0, 40, 1)\ny <- dpois(x, lambda = 20)\nplot(x, y, type = \"h\")\n```\n\n## Discrete distributions, Binomial\n\nIn the Binomial distribution we are counting the number of successes for a total number of trials. Also here we can have 10 successes or 11, not 10.5.\n\n```{r}\nx <- seq(0, 20, 1)\ny <- dbinom(x, size = 20, prob = 0.6)\nplot(x, y, type = \"h\")\n```","srcMarkdownNoYaml":"\n\n```{r}\n\nlibrary(formatR)\n\ndef.chunk.hook  <- knitr::knit_hooks$get(\"chunk\")\nknitr::knit_hooks$set(chunk = function(x, options) {\n  x <- def.chunk.hook(x, options)\n  ifelse(options$size != \"normalsize\", paste0(\"\\n \\\\\", options$size,\"\\n\\n\", x, \"\\n\\n \\\\normalsize\"), x)\n})\n\nknitr::opts_chunk$set(fig.align = \"center\", size = \"footnotesize\", comment = \"#>\")\noptions(width = 60)\n```\n\n```{r}\nrenorm <- function(n, mean = 0, sd = 1, empirical = FALSE){\n    MASS::mvrnorm(n, mean, sd^2, empirical = empirical)[, 1]\n}\n\ntex <- latex2exp::TeX\n```\n\n# Probability Distributions in R\n\n## Working with probability distributions\n\nWhen we have a probability distribution there are several operations that we can do conditioning on certain parameters values:\n\n- generate random $x$ values\n- calculate the density of a certain $x$ value\n- calculate the cumulative probability of a certain $x$ value\n- calculate the $x$ value associated to a certain cumulative probability\n\n## Probability Distributions in R\n\nIn R there are several probability distributions (PD) implemented as functions. Basically the corresponding equation of the PD is converted into R code. For example, the Gaussian distribution Probability Density Function (PDF) is represented in @eq-gaussian-pdf.\n\n$$\nf(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\, e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}}\n$${#eq-gaussian-pdf}\n\n## Gaussian distribution example\n\nLet's convert the @eq-gaussian-pdf into R code. Our variable is $x$ then we have $\\mu$ and $\\sigma$ that are the mean and standard deviation of the Gaussian distribution.\n\n```{r}\n#| echo: true\n#| collapse: true\nnorm <- function(x, mean = 0, sd = 1){\n    1 / sqrt(2 * pi * sd^2) * exp(-((x - mean)^2)/(2 * sd^2))\n}\n\nnorm(0)\nnorm(2)\nnorm(-1)\n```\n\n## Gaussian distribution example\n\nWith the previous code we are calculating the probability density of a certain value given the parameters. Let's use `norm()` for a sequence of values and plot the results.\n\n```{r}\n#| fig-width: 8\n#| fig-height: 5\nx <- seq(-5, 5, 0.1)\ny <- norm(x)\n\n# TODO increase labels size\nplot(x, y, type = \"l\", ylab = \"Density\", main = \"norm(x, mean = 0, sd = 1)\")\n```\n\n## Gaussian distribution example\n\nClearly, if we change the parameters, the calculated densities will be different. For example:\n\n```{r}\n#| fig-width: 8\n#| fig-height: 5\nx <- seq(-5, 5, 0.1)\ny1 <- norm(x)\ny2 <- norm(x, 1, 1)\n\n# TODO increase labels size\nplot(x, y2, type = \"l\", ylab = \"Density\", col = \"dodgerblue\", lwd = 2)\nlines(x, y1, col = \"firebrick\", lwd = 2)\nabline(v = 0, lty = \"dashed\", lwd = 1.5)\npoints(x = c(0, 0), y = c(norm(0), norm(0, 1)), pch = 19, col = c(\"firebrick\", \"dodgerblue\"), cex = 2)\n```\n\n## Gaussian distribution in R\n\nFortunately we do not need to write the probabilities distribution manually but a lot of them are already included in R. For example, the `norm()` function can be replaced by `dnorm()`.\n\n```{r}\n#| echo: true\nnorm(0, 1, 2)\ndnorm(0, 1, 2)\n```\n\n# `d`, `q`, `r` and `p` functions\n\n## `d`, `q`, `r` and `p` functions\n\nActually in R there are already implemented a lot of probability distributions. This document [https://cran.r-project.org/web/views/Distributions.html](https://cran.r-project.org/web/views/Distributions.html) provides a very comprehensive overview.\n\nThe general idea is always the same, regardless the distribution:\n\n- generate random $x$ values **there is the `r` function**\n- calculate the density of a certain $x$ value **there is the `d` function**\n- calculate the cumulative probability of a certain $x$ value **there is the `p` function**\n- calculate the $x$ value associated to a certain cumulative probability **there is the `q` function**\n\n## `d`, `q`, `r` and `p` functions\n\nThe combination is `d`, `p`, `q` or `r` + the function contaning the equations of that specific distribution. Thus we can use `dnorm()`, `pnorm()`, `qnorm()` and `rnorm()`.\n\n## Maximum Likelihood\n\nThe `d` function provides the probability density (or likelihood) of a certain value(s) fixing the parameters. What about fixing the value(s) and changing the parameters?\n\nLet's assume we have $n = 10$ values from a Normal distribution with unknown parameters:\n\n```{r}\nx <- renorm(10, 10, 5, TRUE)\nround(x, 2)\n```\n\nWe can calculate the mean and standard deviation:\n\n```{r}\n#| echo: true\n#| collapse: true\n\nmean(x)\nsd(x)\n```\n\n## Maximum Likelihood\n\nNow, we can calculate the likelihood of the 10 values. Which values should we used for the parameters? We can try different values for $\\mu$ and $\\sigma$:\n\n```{r}\n#| echo: true\n#| collapse: true\n#| tidy.opts: { width.cutoff: 10 }\n\ndnorm(x, 0, 1)\ndnorm(x, 10, 5)\ndnorm(x, -5, 2)\n```\n\n## Maximum Likelihood\n\nWe can take the product (or the sum of the log-transformed values):\n\n```{r}\n#| echo: true\n#| collapse: true\n\nprod(dnorm(x, 0, 1))\nprod(dnorm(x, 10, 5))\nprod(dnorm(x, -5, 2))\n```\n\n## Maximum Likelihood\n\nWhat about varying a parameter, e.g., $\\mu$? We can fix the $\\sigma$ to a certain value, for example 5.\n\n## Maximum Likelihood\n\n```{r}\nll5 <- dnorm(x, 5, 5)\nll8 <- dnorm(x, 8, 5)\nll12 <- dnorm(x, 12, 5)\nll0 <- dnorm(x, 0, 5)\n\npar(mfrow = c(2,2))\n\ncurve(dnorm(x, 5, 5), -20, 30, main = tex(\"$\\\\mu = 5$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll5, col = \"firebrick\")\n\ncurve(dnorm(x, 8, 5), -20, 30, main = tex(\"$\\\\mu = 8$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll8, col = \"firebrick\")\n\ncurve(dnorm(x, 12, 5), -20, 30, main = tex(\"$\\\\mu = 12$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll12, col = \"firebrick\")\n\ncurve(dnorm(x, 0, 5), -20, 30, main = tex(\"$\\\\mu = 0$\"))\npoints(x = x, y = rep(0, length(x)))\nsegments(x, 0, x, ll0, col = \"firebrick\")\n```\n\n## Maximum Likelihood\n\nThere is a point where the likelihood is maximised. The point is when the sum of the heights of the red segments is maximised.\n\n```{r}\n#| out-width: 90%\nmu <- seq(0, 20, 0.1) # sequence from -10 to 10 for the mu parameter\nlik <- sapply(mu, function(m) prod(dnorm(x, m, 5)))\n\nplot(mu, lik, type = \"l\")\n```\n\n## Cumulative distribution\n\nWith the `p` function we calculate the cumulative probability associated with a given value.\n\n```{r}\n#| out-width: 90%\npar(mfrow = c(1, 2))\ncurve(dnorm(x, 0, 1), -4, 4)\npoints(x = -2, y = 0, pch = 19, col = \"firebrick\")\nsegments(x0 = -2, y0 = 0, x1 = -2, y1 = dnorm(-2, 0, 1), col = \"firebrick\")\n\npoints(x = 0, y = 0, pch = 19, col = \"black\")\nsegments(x0 = 0, y0 = 0, x1 = 0, y1 = dnorm(0, 0, 1), col = \"black\")\n\npoints(x = 1, y = 0, pch = 19, col = \"dodgerblue\")\nsegments(x0 = 1, y0 = 0, x1 = 1, y1 = dnorm(1, 0, 1), col = \"dodgerblue\")\n\ncurve(pnorm(x, 0, 1), -4, 4)\npoints(x = -2, y = 0, pch = 19, col = \"firebrick\")\nsegments(x0 = -2, y0 = 0, x1 = -2, y1 = pnorm(-2, 0, 1), col = \"firebrick\")\n\npoints(x = 0, y = 0, pch = 19, col = \"black\")\nsegments(x0 = 0, y0 = 0, x1 = 0, y1 = pnorm(0, 0, 1), col = \"black\")\n\npoints(x = 1, y = 0, pch = 19, col = \"dodgerblue\")\nsegments(x0 = 1, y0 = 0, x1 = 1, y1 = pnorm(1, 0, 1), col = \"dodgerblue\")\n```\n\n## Inverse Cumulative distribution\n\nThe `q` function is basically the inverse of the `p` function. We want to know which is the `x` value associated with a given cumulative probability. One is just the inverse of the other.\n\n```{r}\n#| echo: true\np <- pnorm(-0.5, 0, 1)\np # % of area on the left of -0.5 (given mu and sigma)\nq <- qnorm(p, 0, 1)\nq # value associated with p%  of cumulative probability \n```\n\nIf you remember from Psychometrics courses, these are respectively the percentile and the rank percentile.\n\n## Generating numbers\n\nFinally the `r` function can generate random numbers, fixing the parameters values. This is the core of Monte Carlo simulations.\n\n```{r}\n#| echo: true\nx <- rnorm(100, 10, 5)\nhead(x)\nsummary(x)\n# new values everytime you run the command\nsummary(rnorm(100, 10, 5))\n```\n\n## Discrete distributions\n\nThe same functions can also be used with discrete probability distributions. For example the Binomial or the Poisson distributions.\n\n```{r}\n#| echo: true\nrpois(n = 10, lambda = 20)\ndpois(x = 10, lambda = 20)\nppois(q = 10, lambda = 20)\nqpois(p = 0.5, lambda = 20)\n```\n\n## Discrete distributions, Poisson\n\nIn the Poisson distributions we are counting the number of events. We can have 10 or 11 events, not 10.5.\n\n```{r}\nx <- seq(0, 40, 1)\ny <- dpois(x, lambda = 20)\nplot(x, y, type = \"h\")\n```\n\n## Discrete distributions, Binomial\n\nIn the Binomial distribution we are counting the number of successes for a total number of trials. Also here we can have 10 successes or 11, not 10.5.\n\n```{r}\nx <- seq(0, 20, 1)\ny <- dbinom(x, size = 20, prob = 0.6)\nplot(x, y, type = \"h\")\n```"},"formats":{"minimal-beamer":{"identifier":{"display-name":"Beamer","target-format":"minimal-beamer","base-format":"beamer","extension-name":"minimal"},"execute":{"fig-width":10,"fig-height":7,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"beamer","include-in-header":["../_extensions/filippogambarota/minimal/header.tex"],"filters":[],"output-file":"probability-distributions.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"template-partials":["../_extensions/filippogambarota/minimal/after-body.tex"],"linkcolor":"black","filecolor":"linkcol","citecolor":"linkcol","urlcolor":"linkcol","toccolor":"black","link-citations":true,"toc-title":"Contents","slide-number":false,"revealjs-plugins":[],"resources":["exercises/*"],"title":"Probability Distributions in R"},"classoption":["notheorems"]}},"projectFormats":["html","minimal-revealjs"]}