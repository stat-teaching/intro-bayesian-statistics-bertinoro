{
  "hash": "072b396cb8ba1246f7dd3184b4024a15",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Probability Distributions in R\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n# Probability Distributions in R\n\n## Working with probability distributions\n\nWhen we have a probability distribution there are several operations that we can do conditioning on certain parameters values:\n\n- generate random $x$ values\n- calculate the density of a certain $x$ value\n- calculate the cumulative probability of a certain $x$ value\n- calculate the $x$ value associated to a certain cumulative probability\n\n## Probability Distributions in R\n\nIn R there are several probability distributions (PD) implemented as functions. Basically the corresponding equation of the PD is converted into R code. For example, the Gaussian distribution Probability Density Function (PDF) is represented in @eq-gaussian-pdf.\n\n$$\nf(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\, e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}}\n$${#eq-gaussian-pdf}\n\n## Gaussian distribution example\n\nLet's convert the @eq-gaussian-pdf into R code. Our variable is $x$ then we have $\\mu$ and $\\sigma$ that are the mean and standard deviation of the Gaussian distribution.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnorm <- function(x, mean = 0, sd = 1){\n    1 / sqrt(2 * pi * sd^2) * exp(-((x - mean)^2)/(2 * sd^2))\n}\n\nnorm(0)\n## [1] 0.3989423\nnorm(2)\n## [1] 0.05399097\nnorm(-1)\n## [1] 0.2419707\n```\n:::\n\n\n\n## Gaussian distribution example\n\nWith the previous code we are calculating the probability density of a certain value given the parameters. Let's use `norm()` for a sequence of values and plot the results.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-4-1.pdf){fig-align='center'}\n:::\n:::\n\n\n\n## Gaussian distribution example\n\nClearly, if we change the parameters, the calculated densities will be different. For example:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-5-1.pdf){fig-align='center'}\n:::\n:::\n\n\n\n## Gaussian distribution in R\n\nFortunately we do not need to write the probabilities distribution manually but a lot of them are already included in R. For example, the `norm()` function can be replaced by `dnorm()`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnorm(0, 1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1760327\n```\n\n\n:::\n\n```{.r .cell-code}\ndnorm(0, 1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1760327\n```\n\n\n:::\n:::\n\n\n\n# `d`, `q`, `r` and `p` functions\n\n## `d`, `q`, `r` and `p` functions\n\nActually in R there are already implemented a lot of probability distributions. This document [https://cran.r-project.org/web/views/Distributions.html](https://cran.r-project.org/web/views/Distributions.html) provides a very comprehensive overview.\n\nThe general idea is always the same, regardless the distribution:\n\n- generate random $x$ values **there is the `r` function**\n- calculate the density of a certain $x$ value **there is the `d` function**\n- calculate the cumulative probability of a certain $x$ value **there is the `p` function**\n- calculate the $x$ value associated to a certain cumulative probability **there is the `q` function**\n\n## `d`, `q`, `r` and `p` functions\n\nThe combination is `d`, `p`, `q` or `r` + the function contaning the equations of that specific distribution. Thus we can use `dnorm()`, `pnorm()`, `qnorm()` and `rnorm()`.\n\n## Maximum Likelihood\n\nThe `d` function provides the probability density (or likelihood) of a certain value(s) fixing the parameters. What about fixing the value(s) and changing the parameters?\n\nLet's assume we have $n = 10$ values from a Normal distribution with unknown parameters:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  8.99 14.66 11.12 11.11 -1.10 15.23 14.33  4.63 11.26  9.78\n```\n\n\n:::\n:::\n\n\n\nWe can calculate the mean and standard deviation:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(x)\n## [1] 10\nsd(x)\n## [1] 5\n```\n:::\n\n\n\n## Maximum Likelihood\n\nNow, we can calculate the likelihood of the 10 values. Which values should we used for the parameters? We can try different values for $\\mu$ and $\\sigma$:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndnorm(x, 0, 1)\n##  [1] 1.092433e-18 8.572607e-48 5.579440e-28 6.565480e-28 2.174887e-01\n##  [6] 1.822419e-51 1.074744e-45 8.977072e-06 1.127428e-28 6.819495e-22\ndnorm(x, 10, 5)\n##  [1] 0.078187324 0.051680597 0.077809381 0.077860138 0.006783582 0.046209979\n##  [7] 0.054871529 0.044784961 0.077281059 0.079710824\ndnorm(x, -5, 2)\n##  [1] 4.676681e-12 2.076632e-22 1.556279e-15 1.650843e-15 2.984145e-02\n##  [6] 1.236046e-23 1.054073e-21 1.858781e-06 8.727618e-16 2.766981e-13\n```\n:::\n\n\n\n## Maximum Likelihood\n\nWe can take the product (or the sum of the log-transformed values):\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprod(dnorm(x, 0, 1))\n## [1] 1.008627e-270\nprod(dnorm(x, 10, 5))\n## [1] 1.16165e-13\nprod(dnorm(x, -5, 2))\n## [1] 4.354571e-142\n```\n:::\n\n\n\n## Maximum Likelihood\n\nWhat about varying a parameter, e.g., $\\mu$? We can fix the $\\sigma$ to a certain value, for example 5.\n\n## Maximum Likelihood\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-11-1.pdf){fig-align='center'}\n:::\n:::\n\n\n\n## Maximum Likelihood\n\nThere is a point where the likelihood is maximised. For example, for a linear model like in this case (just estimating the mean) the Maximum Likelihood Estimator (MLE) is just the sample mean.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-12-1.pdf){fig-align='center' width=90%}\n:::\n:::\n",
    "supporting": [
      "probability-distributions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}