{
  "hash": "6d34774dfe51fc3dc7f1b80e605922cd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Probability Distributions in R\n---\n\n::: {.cell}\n\n:::\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n \\normalsize\n\n\n\n# Probability Distributions in R\n\n## Working with probability distributions\n\nWhen we have a probability distribution there are several operations that we can do conditioning on certain parameters values:\n\n- generate random $x$ values\n- calculate the density of a certain $x$ value\n- calculate the cumulative probability of a certain $x$ value\n- calculate the $x$ value associated to a certain cumulative probability\n\n## Probability Distributions in R\n\nIn R there are several probability distributions (PD) implemented as functions. Basically the corresponding equation of the PD is converted into R code. For example, the Gaussian distribution Probability Density Function (PDF) is represented in @eq-gaussian-pdf.\n\n$$\nf(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\, e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}}\n$${#eq-gaussian-pdf}\n\n## Gaussian distribution example\n\nLet's convert the @eq-gaussian-pdf into R code. Our variable is $x$ then we have $\\mu$ and $\\sigma$ that are the mean and standard deviation of the Gaussian distribution.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnorm <- function(x, mean = 0, sd = 1){\n    1 / sqrt(2 * pi * sd^2) * exp(-((x - mean)^2)/(2 * sd^2))\n}\n\nnorm(0)\n#> [1] 0.3989423\nnorm(2)\n#> [1] 0.05399097\nnorm(-1)\n#> [1] 0.2419707\n```\n:::\n\n \\normalsize\n\n\n\n## Gaussian distribution example\n\nWith the previous code we are calculating the probability density of a certain value given the parameters. Let's use `norm()` for a sequence of values and plot the results.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-4-1.pdf){fig-align='center'}\n:::\n:::\n\n \\normalsize\n\n\n\n## Gaussian distribution example\n\nClearly, if we change the parameters, the calculated densities will be different. For example:\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-5-1.pdf){fig-align='center'}\n:::\n:::\n\n \\normalsize\n\n\n\n## Gaussian distribution in R\n\nFortunately we do not need to write the probabilities distribution manually but a lot of them are already included in R. For example, the `norm()` function can be replaced by `dnorm()`.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnorm(0, 1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.1760327\n```\n\n\n:::\n\n```{.r .cell-code}\ndnorm(0, 1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.1760327\n```\n\n\n:::\n:::\n\n \\normalsize\n\n\n\n# `d`, `q`, `r` and `p` functions\n\n## `d`, `q`, `r` and `p` functions\n\nActually in R there are already implemented a lot of probability distributions. This document [https://cran.r-project.org/web/views/Distributions.html](https://cran.r-project.org/web/views/Distributions.html) provides a very comprehensive overview.\n\nThe general idea is always the same, regardless the distribution:\n\n- generate random $x$ values **there is the `r` function**\n- calculate the density of a certain $x$ value **there is the `d` function**\n- calculate the cumulative probability of a certain $x$ value **there is the `p` function**\n- calculate the $x$ value associated to a certain cumulative probability **there is the `q` function**\n\n## `d`, `q`, `r` and `p` functions\n\nThe combination is `d`, `p`, `q` or `r` + the function contaning the equations of that specific distribution. Thus we can use `dnorm()`, `pnorm()`, `qnorm()` and `rnorm()`.\n\n## Maximum Likelihood\n\nThe `d` function provides the probability density (or likelihood) of a certain value(s) fixing the parameters. What about fixing the value(s) and changing the parameters?\n\nLet's assume we have $n = 10$ values from a Normal distribution with unknown parameters:\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] 15.06 13.66  7.77 12.26  9.72 13.68 11.68 13.33  0.62\n#> [10]  2.23\n```\n\n\n:::\n:::\n\n \\normalsize\n\n\n\nWe can calculate the mean and standard deviation:\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(x)\n#> [1] 10\nsd(x)\n#> [1] 5\n```\n:::\n\n \\normalsize\n\n\n\n## Maximum Likelihood\n\nNow, we can calculate the likelihood of the 10 values. Which values should we used for the parameters? We can try different values for $\\mu$ and $\\sigma$:\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndnorm(x, 0, 1)\n#>  [1] 2.214419e-50 1.152300e-41 3.086863e-14 9.204670e-34\n#>  [5] 1.226524e-21 9.441835e-42 1.004709e-30 1.086009e-39\n#>  [9] 3.291893e-01 3.344474e-02\ndnorm(x, 10, 5)\n#>  [1] 0.04780475 0.06100511 0.07223775 0.07204280 0.07966271\n#>  [6] 0.06087474 0.07543414 0.06394678 0.01373134 0.02382822\ndnorm(x, -5, 2)\n#>  [1] 2.836064e-23 2.457018e-20 2.795900e-10 1.343146e-17\n#>  [5] 3.454794e-13 2.295467e-20 1.603083e-16 1.166393e-19\n#>  [9] 3.848397e-03 2.916100e-04\n```\n:::\n\n \\normalsize\n\n\n\n## Maximum Likelihood\n\nWe can take the product (or the sum of the log-transformed values):\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprod(dnorm(x, 0, 1))\n#> [1] 1.008627e-270\nprod(dnorm(x, 10, 5))\n#> [1] 1.16165e-13\nprod(dnorm(x, -5, 2))\n#> [1] 4.354571e-142\n```\n:::\n\n \\normalsize\n\n\n\n## Maximum Likelihood\n\nWhat about varying a parameter, e.g., $\\mu$? We can fix the $\\sigma$ to a certain value, for example 5.\n\n## Maximum Likelihood\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-11-1.pdf){fig-align='center'}\n:::\n:::\n\n \\normalsize\n\n\n\n## Maximum Likelihood\n\nThere is a point where the likelihood is maximised. The point is when the sum of the heights of the red segments is maximised.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-12-1.pdf){fig-align='center' width=90%}\n:::\n:::\n\n \\normalsize\n\n\n\n## Cumulative distribution\n\nWith the `p` function we calculate the cumulative probability associated with a given value.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-13-1.pdf){fig-align='center' width=90%}\n:::\n:::\n\n \\normalsize\n\n\n\n## Inverse Cumulative distribution\n\nThe `q` function is basically the inverse of the `p` function. We want to know which is the `x` value associated with a given cumulative probability. One is just the inverse of the other.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- pnorm(-0.5, 0, 1)\np # % of area on the left of -0.5 (given mu and sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.3085375\n```\n\n\n:::\n\n```{.r .cell-code}\nq <- qnorm(p, 0, 1)\nq # value associated with p%  of cumulative probability \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] -0.5\n```\n\n\n:::\n:::\n\n \\normalsize\n\n\n\nIf you remember from Psychometrics courses, these are respectively the percentile and the rank percentile.\n\n## Generating numbers\n\nFinally the `r` function can generate random numbers, fixing the parameters values. This is the core of Monte Carlo simulations.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- rnorm(100, 10, 5)\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1]  6.4320970 15.0558407 10.6856186 -0.9744109 10.6790606\n#> [6] 15.6645378\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#> -0.9744  6.2342 10.4991  9.9260 13.1631 22.1059\n```\n\n\n:::\n\n```{.r .cell-code}\n# new values everytime you run the command\nsummary(rnorm(100, 10, 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>  -1.324   6.700   9.963   9.952  12.518  23.421\n```\n\n\n:::\n:::\n\n \\normalsize\n\n\n\n## Discrete distributions\n\nThe same functions can also be used with discrete probability distributions. For example the Binomial or the Poisson distributions.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrpois(n = 10, lambda = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] 12 17 26 26 26 35 24 21 18 19\n```\n\n\n:::\n\n```{.r .cell-code}\ndpois(x = 10, lambda = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.005816307\n```\n\n\n:::\n\n```{.r .cell-code}\nppois(q = 10, lambda = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.01081172\n```\n\n\n:::\n\n```{.r .cell-code}\nqpois(p = 0.5, lambda = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 20\n```\n\n\n:::\n:::\n\n \\normalsize\n\n\n\n## Discrete distributions, Poisson\n\nIn the Poisson distributions we are counting the number of events. We can have 10 or 11 events, not 10.5.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-17-1.pdf){fig-align='center'}\n:::\n:::\n\n \\normalsize\n\n\n\n## Discrete distributions, Binomial\n\nIn the Binomial distribution we are counting the number of successes for a total number of trials. Also here we can have 10 successes or 11, not 10.5.\n\n\n\n\n \\footnotesize\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](probability-distributions_files/figure-beamer/unnamed-chunk-18-1.pdf){fig-align='center'}\n:::\n:::\n\n \\normalsize",
    "supporting": [
      "probability-distributions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}